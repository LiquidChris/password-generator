import random

# class PasswordGenerator:
#     def __init__(self, pwL, s, u, l, i):
#         self.attr[0] = pwL
#         self.attr[1] = s
#         self.attr[2] = u
#         self.attr[3] = l
#         self.attr[4] = i

#     def generate(self):        
#         pw_list = []
#         x = 10
#         for i in range(x):
#             rn = random.randint(33, 126)
#             pw_list.append(chr(rn))
#             ++i

#         password = ""
#         for i in pw_list:
#             password += i

#         print("Your password is " + password)
    
    # def verify(self):
    #     if()

def selectIndex(pwList, nonEditable):
    i = random.randint(0, len(pwList)-1)
    while (i in nonEditable):
        i = random.randint(0, len(pwList)-1)
    return i

def editValues(pwList, toEdit, nonEditable): # toEdit = [special, uppercase, lowercase, number]
    if (toEdit[0]):
        i = selectIndex(pwList, nonEditable)
        nonEditable.append(i)
        value = random.randint(33, 64)
        if(value > 60):
            value += 62
        elif(value > 54):
            value += 36
        elif(value > 47):
            value += 10
        pwList[i] = value
    if (toEdit[1]):
        i = selectIndex(pwList, nonEditable)
        nonEditable.append(i)
        value = random.randint(65, 90)
        pwList[i] = value
    if (toEdit[2]):
        i = selectIndex(pwList, nonEditable)
        nonEditable.append(i)
        value = random.randint(97, 122)
        pwList[i] = value
    if (toEdit[3]):
        i = selectIndex(pwList, nonEditable)
        value = random.randint(48, 57)
        pwList[i] = value
    return pwList

def needsEditing(pwList, ranges): # returns the index of the first instance of the attr (False) or return the len list + 1 (True)
    for i in range(len(pwList)):
        for j in range(len(ranges)//2):
            # print(j)
            # print(ranges)
            if (pwList[i] >= ranges[j*2] and pwList[i] <= ranges[j*2+1]):
                return i
            j += 1
    return len(pwList)+1

def verify(pwList, attr): # attr = [pwLen, special, uppercase, lowercase, number]   
    nonEditable = []
    toEdit = [False, False, False, False] # toEdit = [special, uppercase, lowercase, number]  
    if (attr[1]):
        index = needsEditing(pwList, [33,47,58,64,91,96,123,126])
        toEdit[0] = bool(index-len(pwList)+1)
        if(not toEdit[0]):
            nonEditable.append(index)
    if (attr[2]):
        index = needsEditing(pwList, [65, 90])
        toEdit[1] = bool(index-len(pwList)+1)
        if(not toEdit[1]):
            nonEditable.append(index)
    if (attr[3]):
        index = needsEditing(pwList, [97, 122])
        toEdit[2] = bool(index-len(pwList)+1)
        if(not toEdit[2]):
            nonEditable.append(index)
    if (attr[4]):
        index = needsEditing(pwList, [48, 57])
        toEdit[3] = bool(index-len(pwList)+1)
        if(not toEdit[3]):
            nonEditable.append(index)
    return editValues(pwList, toEdit, nonEditable)

def generate(attr): # attr = [pwLen, special, uppercase, lowercase, number]      
    pwList = []
    for i in range(attr[0]):
        rn = random.randint(33, 126)
        pwList.append(rn)

    for i in range(1, len(attr)):
        if attr[i] == 'F':
            attr[i] = False
        else:
            attr[i] = True

    print(attr)
    pwList = verify(pwList, attr)

    password = ""
    for i in pwList:
        password += chr(i)
    return password

# stopMessage = "To end the program type STOP: "
# attr = [0, 'O', 'O', 'O', 'O'] # attr = [pwLen, special, uppercase, lowercase, number]
# while (attr[0] < 4 or attr[0] > 20):
#     attr[0] = int(input("Password Length (input an integer from 4-20): "))
# while (attr[1] != 'T' and attr[1] != 'F'):
#     attr[1] = input("Inlcude Special Character (T/F): ")
# while (attr[2] != 'T' and attr[2] != 'F'):
#     attr[2] = input("Inlcude uppercase (T/F): ")
# while (attr[3] != 'T' and attr[3] != 'F'):
#     attr[3]= input("Inlcude lowercase (T/F): ")
# while (attr[4] != 'T' and attr[4] != 'F'):
#     attr[4] = input("Inlcude a number (T/F): ")  
attr = [17, 'T', 'T', 'T', 'T']
print("Your password is " + generate(attr))

#     pwLen = 0
#     special = False
#     uppercase = False
#     lowercase = False
#     def generate_password(pwL, s, u, l){
#         return 0
#     }
# myPassword = Password()

# pw_attributes = []
# pw_len = input ("Password length (Enter a digit between 4-20): ")
# while ( >)
